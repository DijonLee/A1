package com.analyst1.eval.mapper;


import com.analyst1.eval.model.darknet.pojo.RelatedIOC;
import com.analyst1.eval.model.darknet.response.DarknetMalwareResponse;
//import com.fasterxml.jackson.databind.DeserializationFeature;
//import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.assertj.core.util.Lists;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;

import java.io.IOException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;

//For sake of time I wont do an end to end test -- just test sample json response
public class MalwareMapperTest {

    private ObjectMapper OBJECT_MAPPER = new Jackson2ObjectMapperBuilder().build();

    @Test
    public void malwareMapperTest() throws IOException {
        // I would mock this or do a end to end test
        //curl -X GET "http://localhost:8081/api/attackers?page=1&size=1" -H "accept: application/json"

        String jsonResponse = "{\n" +
                "  \"_embedded\": {\n" +
                "    \"malwares\": [\n" +
                "      {\n" +
                "        \"id\": 5,\n" +
                "        \"name\": \"locavore Pissarro\",\n" +
                "        \"relatedIOCs\": [\n" +
                "          {\n" +
                "            \"value\": \"328ZebEe8f58YefYdR1d28fac97edbc8\",\n" +
                "            \"type\": \"HASH\"\n" +
                "          },\n" +
                "          {\n" +
                "            \"value\": \"4aXQe7TeYde95HeMVOdBQFcC977SMca4\",\n" +
                "            \"type\": \"HASH\"\n" +
                "          },\n" +
                "          {\n" +
                "            \"value\": \"fSH6aM3eR7f8EbdEZHeRdc501H860f58\",\n" +
                "            \"type\": \"HASH\"\n" +
                "          },\n" +
                "          {\n" +
                "            \"value\": \"7U1UX3Yc5cKd67MLea1HQ5Vb9V2bf9bX\",\n" +
                "            \"type\": \"HASH\"\n" +
                "          },\n" +
                "          {\n" +
                "            \"value\": \"mcglynn.net\",\n" +
                "            \"type\": \"DOMAIN\"\n" +
                "          },\n" +
                "          {\n" +
                "            \"value\": \"5C8c99bPXa81OKbH80e3fLcC1ea0bLMa\",\n" +
                "            \"type\": \"HASH\"\n" +
                "          },\n" +
                "          {\n" +
                "            \"value\": \"bGeb24PbUOc8a3S177d95ffeDY7J2bc7\",\n" +
                "            \"type\": \"HASH\"\n" +
                "          },\n" +
                "          {\n" +
                "            \"value\": \"35.38.2.176\",\n" +
                "            \"type\": \"IPV4\"\n" +
                "          },\n" +
                "          {\n" +
                "            \"value\": \"U1aO77aabG4eWbc6d0c09Jc7SY8VFf46\",\n" +
                "            \"type\": \"HASH\"\n" +
                "          }\n" +
                "        ],\n" +
                "        \"_links\": {\n" +
                "          \"self\": {\n" +
                "            \"href\": \"http://localhost:8081/api/malware/5\"\n" +
                "          },\n" +
                "          \"malware\": {\n" +
                "            \"href\": \"http://localhost:8081/api/malware/5\"\n" +
                "          }\n" +
                "        }\n" +
                "      }\n" +
                "    ]\n" +
                "  },\n" +
                "  \"_links\": {\n" +
                "    \"first\": {\n" +
                "      \"href\": \"http://localhost:8081/api/malware?page=0&size=1\"\n" +
                "    },\n" +
                "    \"prev\": {\n" +
                "      \"href\": \"http://localhost:8081/api/malware?page=0&size=1\"\n" +
                "    },\n" +
                "    \"self\": {\n" +
                "      \"href\": \"http://localhost:8081/api/malware?page=1&size=1\"\n" +
                "    },\n" +
                "    \"next\": {\n" +
                "      \"href\": \"http://localhost:8081/api/malware?page=2&size=1\"\n" +
                "    },\n" +
                "    \"last\": {\n" +
                "      \"href\": \"http://localhost:8081/api/malware?page=575&size=1\"\n" +
                "    },\n" +
                "    \"profile\": {\n" +
                "      \"href\": \"http://localhost:8081/api/profile/malware\"\n" +
                "    }\n" +
                "  },\n" +
                "  \"page\": {\n" +
                "    \"size\": 1,\n" +
                "    \"totalElements\": 576,\n" +
                "    \"totalPages\": 576,\n" +
                "    \"number\": 1\n" +
                "  }\n" +
                "}";

        DarknetMalwareResponse attacker = OBJECT_MAPPER.readValue(jsonResponse, DarknetMalwareResponse.class);


        assertEquals(5, attacker.get_embedded().getMalwares().stream().findFirst().get().getId());
        assertEquals("locavore Pissarro", attacker.get_embedded().getMalwares().stream().findFirst().get().getName());
        assertThat(Lists.newArrayList(
                new RelatedIOC("328ZebEe8f58YefYdR1d28fac97edbc8", "HASH"),
                new RelatedIOC("4aXQe7TeYde95HeMVOdBQFcC977SMca4", "HASH"),
                new RelatedIOC("fSH6aM3eR7f8EbdEZHeRdc501H860f58", "HASH"),
                new RelatedIOC("7U1UX3Yc5cKd67MLea1HQ5Vb9V2bf9bX", "HASH"),
                new RelatedIOC("mcglynn.net", "DOMAIN"),
                new RelatedIOC("5C8c99bPXa81OKbH80e3fLcC1ea0bLMa", "HASH"),
                new RelatedIOC("bGeb24PbUOc8a3S177d95ffeDY7J2bc7", "HASH"),
                new RelatedIOC("35.38.2.176", "IPV4"),
                new RelatedIOC("U1aO77aabG4eWbc6d0c09Jc7SY8VFf46", "HASH")


        )).usingRecursiveComparison().isEqualTo(attacker.get_embedded().getMalwares().stream().findFirst().get().getRelatedIOCs());
        //assertThat(Lists.newArrayList( 35, 3, 19, 5, 28, 30, 15).stream().sorted().toArray()).usingRecursiveComparison().isEqualTo(attacker.get_embedded().getAttackers().stream().findFirst().get().getRelatedMalwareIds().stream().sorted().toArray());


        assertEquals(576, attacker.getPage().getTotalPages());
        assertEquals(1, attacker.getPage().getSize());
        assertEquals(1, attacker.getPage().getNumber());
        assertEquals(576, attacker.getPage().getTotalElements());

        //TODO
//        assertEquals(attacker.get_links().);

    }

}
